---
# Reset Kubernetes cluster
- name: Drain node
  ansible.builtin.command: kubectl drain {{ ansible_hostname }} --ignore-daemonsets --delete-emptydir-data --force
  failed_when: false
  when: inventory_hostname in groups['k8s_cluster']

- name: Reset kubeadm
  ansible.builtin.command: kubeadm reset --force
  failed_when: false

- name: Disable and stop services
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: stopped
    enabled: false
  failed_when: false
  with_items:
    - kubelet
    - containerd

- name: Kill all containers
  ansible.builtin.shell: crictl ps -q | xargs -r crictl rm -f
  failed_when: false

- name: Remove containerd pods
  ansible.builtin.shell: crictl pods -q | xargs -r crictl rmp -f
  failed_when: false

- name: Umount Kubernetes filesystems
  ansible.builtin.include_tasks: umount_with_children.yml
  with_items:
    - /var/lib/kubelet
    - /run/netns
    - /var/lib/kubelet/pods
    - /var/lib/kubelet/plugins
    - /run/netns/cni-
  loop_control:
    loop_var: mounted_fs

# OS-specific package removal
- name: Remove Kubernetes packages (Debian/Ubuntu)
  ansible.builtin.apt:
    name:
      - kubeadm
      - kubelet
      - kubectl
    state: absent
    purge: yes
  when: ansible_os_family == "Debian"

- name: Remove Kubernetes packages (Fedora/RedHat)
  ansible.builtin.dnf:
    name:
      - kubeadm
      - kubelet
      - kubectl
    state: absent
  when: ansible_os_family == "RedHat"

- name: Remove Kubernetes directories and files
  ansible.builtin.file:
    name: "{{ item }}"
    state: absent
  with_items:
    - /etc/kubernetes
    - /var/lib/kubelet
    - /var/lib/etcd
    - /var/lib/cni
    - /etc/cni/net.d
    - /root/.kube
    - /home/{{ ansible_user }}/.kube

- name: Remove iptables rules
  ansible.builtin.shell: |
    iptables -F && iptables -t nat -F && iptables -t mangle -F && iptables -X
  failed_when: false

- name: Restart containerd
  ansible.builtin.systemd:
    name: containerd
    state: restarted
    daemon_reload: true
  failed_when: false

- name: Remove K3s http_proxy files
  ansible.builtin.file:
    name: "{{ item }}"
    state: absent
  with_items:
    - "{{ systemd_dir }}/k3s.service.d/http_proxy.conf"
    - "{{ systemd_dir }}/k3s.service.d"
    - "{{ systemd_dir }}/k3s-node.service.d/http_proxy.conf"
    - "{{ systemd_dir }}/k3s-node.service.d"
  when: proxy_env is defined

- name: Reload daemon_reload
  ansible.builtin.systemd:
    daemon_reload: true

- name: Remove tmp directory used for manifests
  ansible.builtin.file:
    path: /tmp/k3s
    state: absent

- name: Check if rc.local exists
  ansible.builtin.stat:
    path: /etc/rc.local
  register: rcfile

- name: Remove rc.local modifications for proxmox lxc containers
  become: true
  ansible.builtin.blockinfile:
    path: /etc/rc.local
    content: "{{ lookup('template', 'templates/rc.local.j2') }}"
    create: false
    state: absent
  when: proxmox_lxc_configure and rcfile.stat.exists

- name: Check rc.local for cleanup
  become: true
  ansible.builtin.slurp:
    src: /etc/rc.local
  register: rcslurp
  when: proxmox_lxc_configure and rcfile.stat.exists

- name: Cleanup rc.local if we only have a Shebang line
  become: true
  ansible.builtin.file:
    path: /etc/rc.local
    state: absent
  when: proxmox_lxc_configure and rcfile.stat.exists and ((rcslurp.content | b64decode).splitlines() | length) <= 1
